2021-05-06
Maven Mybatis

libraray : 남이 만든 함수들을 편하게 가져다 씀.
framework : framework의 틀 안으로 개발자가 들어감?
ㄴIOC(Inversion of Control) : 제어의 역전
->framework이 제시한 대로 만들었다는 뜻

즉 지금까지 cotroller/service/dao를 만들어 썼는데 반드시 이 형태를 따르지 않아도 작동은 했다.
그러나 framework은 무조건 MVC형태를 따라야 한다.

여러 모듈들을 결합하는 형태이므로 Mybatis+SpringFramework 등 여러 조합이 가능하다.

Apache Maven
이제 Maven Project를 쓰면 외부 라이브러리(jar)를 다운->적용
할 필요 없이 (POM)XML에 등록하면 알아서 다운받아서 연결해줄 것이다.

New>Maven Project>Create a simple project(skip archetype selection)
Group id: 프로젝트 그룹명(같으면 하나의 프로젝트로 취급) - com.kh
Artifact id: 실제로 만들 프로젝트 명 - maven-mybatis

target>classes : maven이 정한 buildpath. 다 여기로 배포될거다. 직접 건들지는 말고.
이제부터 WebContent가 src/main/webapp 폴더로 바뀌었다. webapp폴더 생성. 안에 index.jsp 생성.

* 환경설정
properties>Project Facets> Dynamic Web Module 3.1, Java 1.8, JavaScript
오른쪽에 Runtime>아파치톰캣 9.0 체크.

Deployment Assembly>add>folder>/src/main/webapp 을 /로 등록.
							add>Java Build Path entries>maven 등록.
Web Project Settings>maven-mybatis 입력.

아까 말했듯이 이제 web root가 src/main/webapp이므로 js폴더도/파일도 이 밑에 만든다.
저절로 생성된 WebContent폴더는 삭제.
java파일들은 이제 src/main/java 아래 넣으면 된다. servlet들.
지금 Gson.jar가 없으므로 연결해줘야 하는데...
maven repository에서 gson검색. 사용량 많은걸로 선택. 이번엔 2.8.6으로 선택. maven내용물 복사.
pom.xml 들어가서 dependencies 그룹을 만듦. 복사한걸 붙여넣고 저장....을 해보면
Maven Dependencies안에 보면 gson을 알아서 다운받아놓은걸 볼 수 있다.

이제 servlet은 하나만 둘거다. service와 dao는 interface에서 구현할 것이다.
DispatcherServlet과 Controller 사이에 Abstract Controller를 두고 이를 통해 컨트롤러들을 제어할 것이다.

src/main/java/com.kh.mybatis.common.DispatcherServlet.java
이번엔 url mapping을 *.do로 할 것(슬래시 없음)>init도 만든다.
resources에 url-command.properties 생성. 이걸 init에 읽어올거임.
AbstractController 생성. Controller들은 모두 AbstractController를 통해 구현할 것이기 때문에
이를 통하지 않으면 에러나게 만들었다.

mybatis사용시 Date는 java.util.Date사용함.
interface를 통해 java객체를 제어하는것은 매우 흔하다. 근데 잘 모르겠다.
mybatis 라이브러리도 연결해야 하지만 maven 사용중이므로 dependency 복사해서 pom.xml에 복붙.
이제 query문 한줄로 안쓴다(query.properties X). mapper.xml 쓸거다.
src/main/resources/mybatis-config.xml 생성. MyBatis 설정파일 복붙한 다음에 설정값 맞게 변경.
src/main/resources/mapper/student/student-mapper.xml 생성.
dao가 엄청 간단해지고...student-mapper.xml에 태그로 insert,update,select 등을 구별하게 된다.
${name}하던 방식으로...이번엔 #{name}으로 (getName에서 get빼던 방식) 가져온다.

※ JSTL이랑 OJDBC는 maven 자동연결 잘 뻑나니까 그냥 예전처럼 WEB-INF/lib에 가져다쓰자.
mybatis-config.xml에서 별칭을 사용함으로써 student-mapper.xml에서 parameterType을 확 줄일 수 있다.

2021-05-07
<!-- Servlet Controller Service Dao 의 새로운 흐름 -->
VO 말고 map으로 접근해보기.
일단 이제 servlet이 한개이므로 url-command.properties에 주소랑 controller주소 매칭.
그리고 servlet을 만드는 게 아니라 controller를 만든다(extends AbstractController). InsertStudentMapController
@Override 함. doGet이나 doPost
Service나  Dao는 이제 모두 new Impl이다. 새 메소드를 interface에 저장하면 기존 serviceImpl에 오류가 날테고
이제 오류난 부분에 가서 override가 요구되는 메소드를 작성한다.
DQL은 try/catch 안해도 됨. controller에서는 해줘야되고. Dao도 위의 작업 반복.
student-mapper.xml에 dao문 입력. 근데 sql문이 똑같다? map의 key값을 쓰기 때문.
->VO 대신 Map을 쓴다면...vo라면 필드부터 추가해야하지만 map은 그냥 추가로 put하면 되기 때문에 유연하다.

다시 새로운 흐름 정리.
1. jsp에서 새로운 주소 입력. /student/selectOne.do
2. 새 주소 = 실제 주소(com.hk...) 맵핑. 어디에? url-command.properties
3. SelectOneController.java를 AbstractController 상속해서생성. service와 dao는 impl로 extend해서 사용.
	service/dao에 메소드 추가시킬때마다 impl에 @Override 요구됨. 작성해줌.
4. SQL문 작성. 어디에? student-mapper.xml에.

DB와 VO의 column 이름이 다를때 3번째 방법 : mybatis-config mapUnderscoreToCamelCase true
바뀌면 post 안바뀌면 get

