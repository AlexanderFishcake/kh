<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="student">
	<!-- 값 전달시 #{getter에서 get을 제외하고, 소문자로 시작하는 이름} OGNL방식 -->
	<insert id="insertStudent" parameterType="student">
		insert into
			student(no, name, tel)
		values(
			seq_student_no.nextval,
			#{name},
			#{tel}
		)
	</insert>
	<insert id="insertStudentMap" parameterType="map"><!-- insert문은 type생략가능하다. -->
			insert into
			student(no, name, tel)
		values(
			seq_student_no.nextval,
			#{name},
			#{tel}
		)
	</insert>
	<!-- select태그의 resultType/resultMap은 필수속성이다. -->
	<select id="selectStudentCount" resultType="_int">
			select 
				count(*)
			from
				student
	</select>
	<!-- 
		resultset을 mybatis가 자동으로 vo에 mapping해줌. 이름만 같으면...
		1. 동일한 이름의 setter를 통해 값대입 like field
		2. 자동형변환처리
			varchar2, char->String
			number -> int/double
			date -> java.utl.date
		필드명 불일치시
		1. query alias지정 - 대소문자 구분을 위해 ""필수.
			select	reg_date "regDate"...
		2. resultMap - db컬럼과 vo필드(property)를 연결
		3. mybatis-config.xml의 setting태그 mapUnderScoreToCamelCase true설정.
	 -->
	<select id="selectOneStudent" resultType="student">
			select
				*
			from
				student
			where
				no = #{no}
	</select>
	<!-- <select id="selectOneStudent" resultMap="studentMap">
			select
				*
			from
				student
			where
				no = #{no}
	</select> -->
	<!-- 
		db컬럼과 vo필드(property)를 연결.
		1. 이름 불일치 해결
		2. 형변환처리를 임의로 지정
		
		- column과 property가 동일하다면, 해당 자식태그는 생략가능.
		- resultMap은 재사용이 가능하다.
	 -->
	<resultMap type="student" id="studentVOMap">
		<!-- pk컬럼용 -->
		<id column="no" property="no" />
		<!-- 나머지 컬럼용 -->
		<result column="name" property="name"/>
		<result column="tel" property="tel"/>
		<result column="reg_date" property="regDate"/>
	</resultMap>
	<insert id="updateStudentMap" parameterType="map"><!-- insert문은 type생략가능하다. -->
		update student
		set name = #{name},
			tel = #{tel}
		where no = #{no}
	</insert>
	
	<!-- <select id="selectOneStudentMap" resultType="hashmap">
			select 
				no "no",
				name "name",
				tel "tel",
				reg_date "regDate"
			from
				student
			where 
				no = #{no}
	</select> -->
	<select id="selectOneStudentMap" resultMap="studentMap">
			select 
				*
			from
				student
			where 
				no = #{no}
	</select>
	<resultMap type="map" id="studentMap">
		<id column="no" property="no"/>
		<result column="name" property="name"/>
		<result column="tel" property="tel"/>
		<result column="reg_date" property="regDate"/>
	</resultMap>
</mapper>